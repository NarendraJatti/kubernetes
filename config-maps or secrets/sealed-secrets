sealed secret allows to encrpyt secrets to safely store in publci repos 

Kubernetes Sealed Secrets is an extension to Kubernetes that allows you to encrypt your secrets in a way that is safe to store in version control systems, such as Git, without exposing sensitive data. The encryption and decryption process is handled using a combination of public and private keys.

components
========
Operator/controller>>respinsible for decrytpng>for pods use 
kubeseal cli>>for encrpyting 
CRD >>sealedsecret kind 


use helm for sealedsecret Operator>>creates public and pvt key


kubeseal --controller-name=sealed-secrets-controller --controller-namespace=kube-system --format=yaml < secret.yaml > sealedsecret.yaml


# pod-using-secret.yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-app
spec:
  containers:
  - name: app-container
    image: your-app-image
    env:
    - name: USERNAME
      valueFrom:
        secretKeyRef:
          name: my-secret
          key: username
    - name: PASSWORD
      valueFrom:
        secretKeyRef:
          name: my-secret
          key: password


          Advantages of Sealed Secrets
Safe to Store in Git: Since SealedSecrets are encrypted with the public key, they can be stored in a Git repository without exposing sensitive information.
Decryption Happens in the Cluster: Only the controller with the private key can decrypt SealedSecrets, ensuring that sensitive data is only available inside the cluster.
Immutable SealedSecrets: SealedSecrets are tamper-resistant. If someone modifies the encrypted data without access to the private key, it will not decrypt correctly.